name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Set repository name environment variable
        run: echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
      
      - name: Debug environment
        run: |
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Repository Name: $REPO_NAME"
          echo "GitHub Pages URL will be: https://$(echo $GITHUB_REPOSITORY | cut -d'/' -f1).github.io/$REPO_NAME/"
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
      
      - name: Check for required secrets
        run: |
          if [ -z "${{ secrets.VITE_FIREBASE_API_KEY }}" ]; then
            echo "::warning::VITE_FIREBASE_API_KEY is not set. Firebase authentication will not work in the deployed application."
          fi
          if [ -z "${{ secrets.VITE_FIREBASE_PROJECT_ID }}" ]; then
            echo "::warning::VITE_FIREBASE_PROJECT_ID is not set. Firebase authentication will not work in the deployed application."
          fi
          if [ -z "${{ secrets.VITE_FIREBASE_APP_ID }}" ]; then
            echo "::warning::VITE_FIREBASE_APP_ID is not set. Firebase authentication will not work in the deployed application."
          fi
          if [ -z "${{ secrets.VITE_API_BASE_URL }}" ]; then
            echo "::warning::VITE_API_BASE_URL is not set. Using default API URL: https://husky-mower-backend.replit.app"
          fi
          # Don't fail the build if secrets are missing, just warn
      
      - name: Build project
        run: node scripts/gh-pages-build.js
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          AUTOMOWER_API_KEY: ${{ secrets.AUTOMOWER_API_KEY }}
          AUTOMOWER_CLIENT_SECRET: ${{ secrets.AUTOMOWER_CLIENT_SECRET }}
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL || 'https://husky-mower-backend.replit.app' }}
          VITE_BASE_PATH: /${{ env.REPO_NAME }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          
      - name: Ensure all necessary static files exist
        run: |
          mkdir -p ./dist/public
          
          # Create emergency index.html if it doesn't exist
          if [ ! -f ./dist/public/index.html ]; then
            echo "Building index.html failed. Creating a minimal index.html to debug."
            echo '<!DOCTYPE html>' > ./dist/public/index.html
            echo '<html>' >> ./dist/public/index.html
            echo '<head>' >> ./dist/public/index.html
            echo '  <meta charset="utf-8">' >> ./dist/public/index.html
            echo '  <title>HuskyMower - Emergency Index</title>' >> ./dist/public/index.html
            echo "  <base href=\"/${REPO_NAME}/\">" >> ./dist/public/index.html
            echo '  <script>' >> ./dist/public/index.html
            echo "    console.log('This is an emergency index.html created by the GitHub Actions workflow');" >> ./dist/public/index.html
            echo "    window.location.href = \"/${REPO_NAME}/\";" >> ./dist/public/index.html
            echo '  </script>' >> ./dist/public/index.html
            echo '</head>' >> ./dist/public/index.html
            echo '<body>' >> ./dist/public/index.html
            echo '  <h1>HuskyMower</h1>' >> ./dist/public/index.html
            echo '  <p>The build process failed to create index.html. Please check the GitHub Actions logs.</p>' >> ./dist/public/index.html
            echo "  <p><a href=\"/${REPO_NAME}/\">Go to home page</a></p>" >> ./dist/public/index.html
            echo '</body>' >> ./dist/public/index.html
            echo '</html>' >> ./dist/public/index.html
          fi
          
          # Create 404.html if it doesn't exist
          if [ ! -f ./dist/public/404.html ]; then
            echo "Copying 404.html from client/public directory"
            cp -f ./client/public/404.html ./dist/public/404.html || echo "Failed to copy 404.html"
            
            # If copy fails, create a basic 404 page
            if [ ! -f ./dist/public/404.html ]; then
              echo '<!DOCTYPE html>' > ./dist/public/404.html
              echo '<html>' >> ./dist/public/404.html
              echo '<head>' >> ./dist/public/404.html
              echo '  <meta charset="utf-8">' >> ./dist/public/404.html
              echo '  <title>Page Not Found</title>' >> ./dist/public/404.html
              echo "  <base href=\"/${REPO_NAME}/\">" >> ./dist/public/404.html
              echo '</head>' >> ./dist/public/404.html
              echo '<body>' >> ./dist/public/404.html
              echo '  <h1>404 - Page Not Found</h1>' >> ./dist/public/404.html
              echo "  <p><a href=\"/${REPO_NAME}/\">Go to home page</a></p>" >> ./dist/public/404.html
              echo '</body>' >> ./dist/public/404.html
              echo '</html>' >> ./dist/public/404.html
            fi
          fi
          
          # Create .nojekyll file
          echo "Creating .nojekyll file to prevent Jekyll processing"
          touch ./dist/public/.nojekyll
          
          # Create env-config.js if it doesn't exist
          if [ ! -f ./dist/public/env-config.js ]; then
            echo "Creating basic env-config.js file"
            echo '// Runtime environment configuration' > ./dist/public/env-config.js
            echo 'window.ENV = window.ENV || {};' >> ./dist/public/env-config.js
            echo "window.ENV.BASE_PATH = \"/${REPO_NAME}\";" >> ./dist/public/env-config.js
            echo "console.log('Runtime environment configuration loaded from emergency file');" >> ./dist/public/env-config.js
          fi
          
      - name: Verify build output
        run: |
          echo "Checking build output files and structure..."
          ls -la ./dist/public
          echo "Checking if key files exist..."
          [ -f ./dist/public/index.html ] || (echo "index.html missing" && exit 1)
          [ -f ./dist/public/404.html ] || (echo "404.html missing" && exit 1)
          [ -f ./dist/public/env-config.js ] || (echo "env-config.js missing" && exit 1)
          [ -f ./dist/public/.nojekyll ] || (echo ".nojekyll missing" && exit 1)
          echo "Build verification completed successfully"
          
      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist/public'
          
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Output deployment URL
        run: |
          echo "===================================================================================="
          echo "🎉 Deployed successfully to ${{ steps.deployment.outputs.page_url }} 🎉"
          echo "===================================================================================="
          echo ""
          echo "⚠️ IMPORTANT: GitHub Pages Access Instructions"
          echo "-------------------------------------------------------------------------------------"
          echo "1. Access your site at: ${{ steps.deployment.outputs.page_url }}"
          echo "2. If you see a 404 error, try clearing your browser cache or opening in a private window"
          echo "3. It may take a few minutes for the changes to propagate to GitHub's CDN"
          echo ""
          echo "⚠️ IMPORTANT: Firebase Authentication Configuration"
          echo "-------------------------------------------------------------------------------------"
          echo "If you see a Firebase API Key error in the console, please check:"
          echo "1. Repository Secrets - Verify that you have set up these GitHub secrets:"
          echo "   - VITE_FIREBASE_API_KEY   - Your Firebase API key"
          echo "   - VITE_FIREBASE_PROJECT_ID - Your Firebase project ID"
          echo "   - VITE_FIREBASE_APP_ID    - Your Firebase app ID"
          echo ""
          echo "2. Firebase Console Configuration:"
          echo "   - Ensure email/password authentication is enabled"
          echo "   - Add your GitHub Pages domain to authorized domains"
          echo "     (e.g., yousef1508.github.io)"
          echo ""
          echo "3. After fixing the secrets, re-run this workflow from Actions tab"
          echo ""
          echo "📋 GitHub Pages Configuration"
          echo "-------------------------------------------------------------------------------------"
          echo "If you encounter any issues accessing the site, please ensure GitHub Pages is enabled:"
          echo "1. Go to repository Settings > Pages"
          echo "2. Ensure source is set to 'GitHub Actions'"
          echo ""
          echo "For more details, check the troubleshooting section in README.md"
          echo "===================================================================================="